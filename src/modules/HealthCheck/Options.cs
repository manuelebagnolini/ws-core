using System.ComponentModel;
using Ws.Core.Extensions.Base;

namespace Ws.Core.Extensions.HealthCheck;

public class AuthOptions
{
    [Description("List of policy name to validate")]
    public IEnumerable<string>? AuthPolicies { get; set; }
    [Description("List of authorized hosts, i.e. host:8001")] 
    public IEnumerable<string>? AuthHosts { get; set; }
}
public partial class Options: IOptions
{
    [Description("List of health check routes; 2 routes: /healtz for basic app status, with no additional check; /healtz/checks for overall app status, performing all checks")]
    public IEnumerable<Route>? Routes { get; set; }             
    public CheckEntries? Checks { get; set; }
    public UiOptions Ui { get; set; } = new ();
    public class Route: AuthOptions
    {
        [Description("i.e. /healtz , /healtz/checks")]
        public string? Path { get; set; }
        [DefaultValue(RouteContentType.json)]
        public RouteContentType ContentType { get; set; } = RouteContentType.json;
        /// <summary>
        /// If true skip any defined checks, returning a basic health check endpoint
        /// </summary>
        [Description("If true skip any defined checks, returning a basic health check endpoint")]
        [DefaultValue(false)]
        public bool SkipChecks { get; set; } = false;
    }
    public enum RouteContentType
    {
        json,
        text
    }
    public partial class CheckEntries
    {
        public IEnumerable<StorageCheck>? Storage { get; set; }
        public MemoryCheck? Memory { get; set; }
        public IEnumerable<ProcessCheck>? Process { get; set; }
        public IEnumerable<WinServiceCheck>? WinService { get; set; }
        public IEnumerable<TcpCheck>? Tcp { get; set; }
        public IEnumerable<HttpCheck>? Http { get; set; }
    }
    public class ProcessCheck: HealthResult
    {
        [Description("Check if exists, skip check if empty")]
        public string? ProcessName { get; set; }
    }
    public class WinServiceCheck : HealthResult
    {
        [Description("Check if running, skip check if empty")]
        public string? ServiceName { get; set; }
    }
    public class TcpCheck : HealthResult
    {
        [Description("Skip check if empty")]
        public string? Host { get; set; }
        public int Port { get; set; }
    }
    public class MemoryCheck: HealthResult
    {
        [Description("i.e. 512")]
        public int MaximumAllocatedMb { get; set; }
    }
    public class HealthResult
    {
        [DefaultValue("Autogenerated guid")]
        public string Name { get; set; } = Guid.NewGuid().ToString()[..8];
        [Description("Health status on check failure")]
        [DefaultValue(Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy)]
        public Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus Status { get; set; } = Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy;
        [Description("List of task tags")]
        public string[] Tags { get; set; } = Array.Empty<string>();
    }

    public class HttpCheck : HealthResult
    {
        public string? Url { get; set; }
    }
    public class StorageCheck: HealthResult
    {
        /// <summary>
        /// i.e. C:\
        /// </summary>
        [Description("i.e. C:\\, skip check if empty")]
        public string? Driver { get; set; }
        [Description("i.e. 1024 = 1Gb")]
        public long MinimumFreeMb { get; set; }
    }

    /// <summary>
    /// https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/master/src/HealthChecks.UI/Configuration/Options.cs
    /// </summary>
    public class UiOptions: AuthOptions
    {
        [DefaultValue(false)]
        public bool Enable { get; set; } = false;
        [DefaultValue("/healthchecks-ui")]
        public string Route { get; set; } = "/healthchecks-ui";
        [DefaultValue("/healthchecks-api")]
        public string RouteApi { get; set; } = "/healthchecks-api";
        [DefaultValue("/healthchecks-webhooks")]
        public string RouteWebhook { get; set; } = "/healthchecks-webhooks";
        /// <summary>
        /// i.e. wwwroot/healthcheck-ui/style.css
        /// </summary>
        [Description("i.e. wwwroot/healthcheck-ui/style.css")]
        public string? InjectCss { get; set; }
        [Description("List of health check endopoint to show")]
        public IEnumerable<EndpointOptions>? Endpoints { get; set; }
        public IEnumerable<WebhookOptions>? Webhooks { get; set; }
        public int EvaluationTimeinSeconds { get; set; } = 60;
        public int MinimumSecondsBetweenFailureNotifications { get; set; } = 300;
        public class EndpointOptions
        {
            public string? Name { get; set; } 
            [Description("i.e. /healthz/checks, or absolute path to external endopoints. Skip check if empty")]
            public string? Uri { get; set; }
        }
        public class WebhookOptions: EndpointOptions
        {
            [Description("Encoded payload for failed check. Available token: [[LIVENESS]] [[FAILURE]] [[DESCRIPTIONS]]")]
            public string Payload { get; set; } = string.Empty;
            [Description("Encoded payload for restored status. Available token: [[LIVENESS]]")]
            public string RestorePayload { get; set; } = string.Empty;
        }
    }
}
